//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerSetting/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""717e0661-498e-4a59-9d8c-a6f6ace8acf8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3279d4bd-f062-4b40-945e-cac77929a054"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fa4cd28b-7770-4730-b7b7-4aae97c604a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""3fc4a2ab-9cfa-44fb-b4f6-6652609d3da0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""622d9a2d-43fd-44f7-a044-16e831662d28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""fd08a9bf-f4e4-4d1c-ab70-e91c1a391a95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""1f070006-d9fe-4c9f-8384-dc948fa5cda4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""3fdb1b5a-7862-4d90-bfde-ceaf48debf4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MagicAbilty"",
                    ""type"": ""Button"",
                    ""id"": ""9be28af5-c85f-438d-a80d-cccf40bdd378"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Healing"",
                    ""type"": ""Button"",
                    ""id"": ""63001b07-c88c-4040-b8dd-41a00e011b46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ManaRecovery"",
                    ""type"": ""Button"",
                    ""id"": ""fd6573af-b575-4f5f-8ef4-dc747512407a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9a03e9b1-9450-4cfe-8557-6785a085e79f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a295eb70-fc3b-4530-8742-64c6eee11732"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""71fee323-6b56-425e-a1ef-785006ad083d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bdb36401-46ea-4eeb-a6f5-7d3e2996e050"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""487159da-1cd0-4d50-b22c-bed728b7f5b7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e9c8c192-4054-4669-b9dd-87304d1f7b61"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24655309-44e0-49c1-86e8-edd9e20f21ad"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53ff619c-e832-4c20-ad04-39cdac90140d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f170db3c-c771-4f08-8a81-b484b8c8e44f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa8487a2-94ab-4863-8fb4-268be07b6329"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06ea8c9e-58b0-4651-9e2e-798ad3b3e01b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be9fbb21-ee3e-41ad-a870-2aeeb65d812f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f630d725-6118-4584-97c0-6d71558aeb8b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8efaf567-64b4-47d4-8d55-365701b5b13d"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90c65e37-f862-49b5-8071-233e7fe84e2b"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MagicAbilty"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e81edce0-47ee-4a48-bd35-36d207733717"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Healing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a30d4566-451e-4f39-a642-1b386de84097"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ManaRecovery"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogs"",
            ""id"": ""d9170d24-1b4a-48f4-b3f8-47f69bccfcea"",
            ""actions"": [
                {
                    ""name"": ""Option1"",
                    ""type"": ""Button"",
                    ""id"": ""61d2b4ba-4e38-4094-98af-48b61e44366e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option2"",
                    ""type"": ""Button"",
                    ""id"": ""2c379cb0-245d-4063-8fe8-f5f26ccdc815"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option3"",
                    ""type"": ""Button"",
                    ""id"": ""a8a0de9c-1301-46d1-9d09-7d3a9cf46d9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""2957b144-6145-4b3e-967a-a212099a03ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitDialog"",
                    ""type"": ""Button"",
                    ""id"": ""744a1162-bdba-48f9-ab3c-6e9cb06e4649"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3410f063-73db-477f-8fac-12500e155d51"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17026053-27fe-42d0-bd3a-4049de7c9277"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0496e821-46db-4577-8c9e-922825a81f7f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11d81e2f-b198-48d9-91e3-90405ecdbf16"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c05ee11-5dde-4614-b850-c329ce5ead1d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitDialog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Move = m_GamePlay.FindAction("Move", throwIfNotFound: true);
        m_GamePlay_Jump = m_GamePlay.FindAction("Jump", throwIfNotFound: true);
        m_GamePlay_Roll = m_GamePlay.FindAction("Roll", throwIfNotFound: true);
        m_GamePlay_Attack = m_GamePlay.FindAction("Attack", throwIfNotFound: true);
        m_GamePlay_Block = m_GamePlay.FindAction("Block", throwIfNotFound: true);
        m_GamePlay_ThrowWeapon = m_GamePlay.FindAction("ThrowWeapon", throwIfNotFound: true);
        m_GamePlay_Interaction = m_GamePlay.FindAction("Interaction", throwIfNotFound: true);
        m_GamePlay_MagicAbilty = m_GamePlay.FindAction("MagicAbilty", throwIfNotFound: true);
        m_GamePlay_Healing = m_GamePlay.FindAction("Healing", throwIfNotFound: true);
        m_GamePlay_ManaRecovery = m_GamePlay.FindAction("ManaRecovery", throwIfNotFound: true);
        // Dialogs
        m_Dialogs = asset.FindActionMap("Dialogs", throwIfNotFound: true);
        m_Dialogs_Option1 = m_Dialogs.FindAction("Option1", throwIfNotFound: true);
        m_Dialogs_Option2 = m_Dialogs.FindAction("Option2", throwIfNotFound: true);
        m_Dialogs_Option3 = m_Dialogs.FindAction("Option3", throwIfNotFound: true);
        m_Dialogs_Interaction = m_Dialogs.FindAction("Interaction", throwIfNotFound: true);
        m_Dialogs_ExitDialog = m_Dialogs.FindAction("ExitDialog", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_Move;
    private readonly InputAction m_GamePlay_Jump;
    private readonly InputAction m_GamePlay_Roll;
    private readonly InputAction m_GamePlay_Attack;
    private readonly InputAction m_GamePlay_Block;
    private readonly InputAction m_GamePlay_ThrowWeapon;
    private readonly InputAction m_GamePlay_Interaction;
    private readonly InputAction m_GamePlay_MagicAbilty;
    private readonly InputAction m_GamePlay_Healing;
    private readonly InputAction m_GamePlay_ManaRecovery;
    public struct GamePlayActions
    {
        private @Inputs m_Wrapper;
        public GamePlayActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GamePlay_Move;
        public InputAction @Jump => m_Wrapper.m_GamePlay_Jump;
        public InputAction @Roll => m_Wrapper.m_GamePlay_Roll;
        public InputAction @Attack => m_Wrapper.m_GamePlay_Attack;
        public InputAction @Block => m_Wrapper.m_GamePlay_Block;
        public InputAction @ThrowWeapon => m_Wrapper.m_GamePlay_ThrowWeapon;
        public InputAction @Interaction => m_Wrapper.m_GamePlay_Interaction;
        public InputAction @MagicAbilty => m_Wrapper.m_GamePlay_MagicAbilty;
        public InputAction @Healing => m_Wrapper.m_GamePlay_Healing;
        public InputAction @ManaRecovery => m_Wrapper.m_GamePlay_ManaRecovery;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Block.started += instance.OnBlock;
            @Block.performed += instance.OnBlock;
            @Block.canceled += instance.OnBlock;
            @ThrowWeapon.started += instance.OnThrowWeapon;
            @ThrowWeapon.performed += instance.OnThrowWeapon;
            @ThrowWeapon.canceled += instance.OnThrowWeapon;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
            @MagicAbilty.started += instance.OnMagicAbilty;
            @MagicAbilty.performed += instance.OnMagicAbilty;
            @MagicAbilty.canceled += instance.OnMagicAbilty;
            @Healing.started += instance.OnHealing;
            @Healing.performed += instance.OnHealing;
            @Healing.canceled += instance.OnHealing;
            @ManaRecovery.started += instance.OnManaRecovery;
            @ManaRecovery.performed += instance.OnManaRecovery;
            @ManaRecovery.canceled += instance.OnManaRecovery;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Block.started -= instance.OnBlock;
            @Block.performed -= instance.OnBlock;
            @Block.canceled -= instance.OnBlock;
            @ThrowWeapon.started -= instance.OnThrowWeapon;
            @ThrowWeapon.performed -= instance.OnThrowWeapon;
            @ThrowWeapon.canceled -= instance.OnThrowWeapon;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
            @MagicAbilty.started -= instance.OnMagicAbilty;
            @MagicAbilty.performed -= instance.OnMagicAbilty;
            @MagicAbilty.canceled -= instance.OnMagicAbilty;
            @Healing.started -= instance.OnHealing;
            @Healing.performed -= instance.OnHealing;
            @Healing.canceled -= instance.OnHealing;
            @ManaRecovery.started -= instance.OnManaRecovery;
            @ManaRecovery.performed -= instance.OnManaRecovery;
            @ManaRecovery.canceled -= instance.OnManaRecovery;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);

    // Dialogs
    private readonly InputActionMap m_Dialogs;
    private List<IDialogsActions> m_DialogsActionsCallbackInterfaces = new List<IDialogsActions>();
    private readonly InputAction m_Dialogs_Option1;
    private readonly InputAction m_Dialogs_Option2;
    private readonly InputAction m_Dialogs_Option3;
    private readonly InputAction m_Dialogs_Interaction;
    private readonly InputAction m_Dialogs_ExitDialog;
    public struct DialogsActions
    {
        private @Inputs m_Wrapper;
        public DialogsActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Option1 => m_Wrapper.m_Dialogs_Option1;
        public InputAction @Option2 => m_Wrapper.m_Dialogs_Option2;
        public InputAction @Option3 => m_Wrapper.m_Dialogs_Option3;
        public InputAction @Interaction => m_Wrapper.m_Dialogs_Interaction;
        public InputAction @ExitDialog => m_Wrapper.m_Dialogs_ExitDialog;
        public InputActionMap Get() { return m_Wrapper.m_Dialogs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogsActions set) { return set.Get(); }
        public void AddCallbacks(IDialogsActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogsActionsCallbackInterfaces.Add(instance);
            @Option1.started += instance.OnOption1;
            @Option1.performed += instance.OnOption1;
            @Option1.canceled += instance.OnOption1;
            @Option2.started += instance.OnOption2;
            @Option2.performed += instance.OnOption2;
            @Option2.canceled += instance.OnOption2;
            @Option3.started += instance.OnOption3;
            @Option3.performed += instance.OnOption3;
            @Option3.canceled += instance.OnOption3;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
            @ExitDialog.started += instance.OnExitDialog;
            @ExitDialog.performed += instance.OnExitDialog;
            @ExitDialog.canceled += instance.OnExitDialog;
        }

        private void UnregisterCallbacks(IDialogsActions instance)
        {
            @Option1.started -= instance.OnOption1;
            @Option1.performed -= instance.OnOption1;
            @Option1.canceled -= instance.OnOption1;
            @Option2.started -= instance.OnOption2;
            @Option2.performed -= instance.OnOption2;
            @Option2.canceled -= instance.OnOption2;
            @Option3.started -= instance.OnOption3;
            @Option3.performed -= instance.OnOption3;
            @Option3.canceled -= instance.OnOption3;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
            @ExitDialog.started -= instance.OnExitDialog;
            @ExitDialog.performed -= instance.OnExitDialog;
            @ExitDialog.canceled -= instance.OnExitDialog;
        }

        public void RemoveCallbacks(IDialogsActions instance)
        {
            if (m_Wrapper.m_DialogsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogsActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogsActions @Dialogs => new DialogsActions(this);
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    public interface IGamePlayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnThrowWeapon(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnMagicAbilty(InputAction.CallbackContext context);
        void OnHealing(InputAction.CallbackContext context);
        void OnManaRecovery(InputAction.CallbackContext context);
    }
    public interface IDialogsActions
    {
        void OnOption1(InputAction.CallbackContext context);
        void OnOption2(InputAction.CallbackContext context);
        void OnOption3(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnExitDialog(InputAction.CallbackContext context);
    }
}
